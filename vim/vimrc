"""IMPORTANT. Do this first to setup vim-plug
" 1. Follow instructions in https://github.com/junegunn/vim-plug#installation.
"    (put the plug.vim file in ~/.vim/autoload directory)
"""

"""IMPORTANT. If using neovim do the following.
" 1. Install neovim using `brew install neovim`
" 2. create ~/.config/nvim/init.vim with these contents (without the comment quotes):
"
"    set runtimepath^=~/.vim runtimepath+=~/.vim/after
"    let &packpath = &runtimepath
"    source ~/.vimrc
"
"""

"""IMPORTANT. For python stuff, make sure to install the following.
" 1. flake8: `pip install flake8`
" (2. neovim: `pip install neovim`)
"""

"""IMPORTANT. Do this after finishing the above steps.
" 1. Open vim/nvim and run :PlugInstall
"""

let mapleader = ","
set nocompatible
filetype off

"""Start of Plug stuff
call plug#begin('~/.vim/plugged')
Plug 'zchee/deoplete-jedi'
Plug 'Shougo/deoplete.nvim'
Plug 'easymotion/vim-easymotion'
Plug 'ervandew/supertab'
Plug 'flazz/vim-colorschemes'
Plug 'guns/vim-sexp'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-syntastic/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'ntpeters/vim-better-whitespace'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'fatih/vim-go'
Plug 'jpalardy/vim-slime'
Plug 'mklabs/split-term.vim'
Plug 'neovimhaskell/haskell-vim'
call plug#end()
"""End of Plug stuff

filetype plugin indent on
syntax on

set tabstop=4
set expandtab
set shiftwidth=4
set tw=90
set mouse=a
set ic
set incsearch
set ruler
set nofoldenable

"""Color scheme
colorscheme jellybeans

"""Setup backup/swap dir
set backup
set swapfile
set backupdir=~/.vim-tmp
set directory=~/.vim-tmp

match ErrorMsg '\%>100v.\+'
match ErrorMsg '\s\+\%#\@<!$'
autocmd InsertLeave * redraw!

"""Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
highlight SyntasticError guibg=#2f0000
highlight SyntasticErrorSign guifg=white guibg=red
highlight SyntasticErrorLine guifg=white guibg=red
highlight SyntasticWarningLine guifg=white guibg=red
let g:syntastic_enable_signs = 1
nnoremap <leader>en :silent! lnext<CR>
nnoremap <leader>ep :silent! lprev<CR>

"""Rainbow parentheses everywhere
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['white',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

"""Vim-slime
let g:slime_target = "neovim"

"""Easymotion
map <Leader> <Plug>(easymotion-prefix)
nmap <Leader>, <Plug>(easymotion-overwin-f)
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
map <Leader>/ <Plug>(incsearch-easymotion-/)
map <Leader>? <Plug>(incsearch-easymotion-?)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

"""C++
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

"""Python
"(Remember to pip install flake8!)
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = "--max-line-length=100"
let g:deoplete#enable_at_startup = 1

"""Haskell
let g:haskell_indent_if = 3
let g:haskell_indent_case = 2
let g:haskell_indent_let = 4
let g:haskell_indent_where = 2
let g:haskell_indent_before_where = 2
let g:haskell_indent_after_bare_where = 2
let g:haskell_indent_do = 3
let g:haskell_indent_in = 1
let g:haskell_indent_guard = 2

"""Tabs
nnoremap <leader>tn :silent! tabn<CR>
nnoremap <leader>tp :silent! tabp<CR>
nnoremap <leader>to :silent! tabnew<CR>

"""NERDTree
nnoremap \n :NERDTreeToggle<CR>

"""Fzf
nnoremap \\ :silent! Buffers<CR>
nnoremap \f :silent! Files<CR>
nnoremap \l :silent! Lines<CR>
nnoremap \s :silent! Ag<CR>

"""Unhighlight last search on escape
nnoremap <Esc> :nohlsearch<CR><Esc>

"""Highlight rows which are too long
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/

"""Set highlight color for search
highlight Search cterm=NONE ctermfg=black ctermbg=white

"""Custom functions
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal 'z"
endfunc
autocmd BufWrite * :call DeleteTrailingWS()

"With cursor on line call :Underline
function! s:Underline(chars)
    let chars = empty(a:chars) ? '-' : a:chars
    let nr_columns = virtcol('$') - 1
    let uline = repeat(chars, (nr_columns / len(chars)) + 1)
    put =strpart(uline, 0, nr_columns)
endfunction
command! -nargs=? Underline call s:Underline(<q-args>)

"Auto create non-existent dirs when creating a new file
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
