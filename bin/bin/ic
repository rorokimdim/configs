#!/usr/bin/env python

import json
import subprocess
import sys


def get_running_instances():
    result = subprocess.run(
        ['aws', 'ec2', 'describe-instances',
         '--query', 'Reservations[*].Instances[*].[InstanceId]',
         '--filters', 'Name=instance-state-name,Values=running',
         '--output', 'text'],
        stdout=subprocess.PIPE,
        text=True)
    return sorted(result.stdout.split())


def get_ports():
    ports = {}
    from_ports = []
    to_ports = []
    if len(sys.argv) > 1:
        for s in sys.argv[1:]:
            splits = s.split(':')
            from_port = splits[0]
            to_port = splits[1] if len(splits) == 2 else splits[0]

            from_ports.append(from_port)
            to_ports.append(to_port)

    if from_ports and to_ports:
        ports = dict(portNumber=from_ports, localPortNumber=to_ports)

    return ports


running_instances = get_running_instances()
if not running_instances:
    print('No running ec2 instances')
    sys.exit(0)

if len(running_instances) == 1:
    selected = running_instances[0]
else:
    fzf = subprocess.run(
        ['fzf'],
        stdout=subprocess.PIPE,
        input='\n'.join(running_instances),
        encoding='utf-8')

    selected = fzf.stdout.strip()

if not selected:
    sys.exit(0)

cmd = ['aws', 'ssm', 'start-session', '--target', selected]

ports = get_ports()
if ports:
    cmd.extend(['--document-name', 'AWS-StartPortForwardingSession', '--parameters', json.dumps(ports)])

subprocess.run(cmd)
